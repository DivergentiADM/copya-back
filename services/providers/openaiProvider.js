// providers/openaiProvider.js
require('dotenv').config();
const { OpenAI } = require('openai');
const logger = require('../../utils/logger');

if (!process.env.SYSTEM_OPENAI_API_KEY) {
  throw new Error('La variable SYSTEM_OPENAI_API_KEY es requerida para OpenAIProvider');
}

const client = new OpenAI({ apiKey: process.env.SYSTEM_OPENAI_API_KEY });
const MODEL = 'gpt-4.1';
const DEFAULT_TEMPERATURE = 0.8;
const DEFAULT_MAX_TOKENS = 2000;


/** Construye el prompt de sistema con contexto completo */
function buildSystemPrompt( agent, topic, platform, format, duration, lighting, style, targetAudience, businessContext) {
  return `Eres ${agent.personality}, un director creativo de video especializado en ${platform}.
  
üìã DETALLES DEL PROYECTO:
- Tema: "${topic}"
- Plataforma: ${platform} (${format})
- Duraci√≥n: ${duration} segundos
- Iluminaci√≥n: ${lighting}
- Estilo visual: ${style}
- Audiencia: ${targetAudience}
${Object.keys(businessContext || {}).length
    ? `\nüè¢ CONTEXTO DE NEGOCIO:\n${JSON.stringify(businessContext, null, 2)}`
    : ''
}

üîß INSTRUCCIONES:
1. Responde **solo** con un JSON v√°lido, sin c√≥digo ni markdown ni "\n  \" estos caracteres.
2. Incluye: title, content (2‚Äì3 l√≠neas), script (con timing y escenas), narrativeArc, storyboard (lista de escenas detalladas), callToAction y metadata.
3. Deja que el LLM decida internamente c√°mara, transiciones, paleta de color, m√∫sica, efectos, etc.
4. Optimiza para m√°xima retenci√≥n en ${platform}.
INSTRUCCIONES PARA EL STORYTELLING:
1. Crea una narrativa visual atractiva que se adapte perfectamente al formato ${format} de ${platform}
2. Divide el video en escenas espec√≠ficas con duraci√≥n exacta para cada una
3. Describe cada toma con detalles t√©cnicos (c√°mara, iluminaci√≥n, composici√≥n)
4. Incluye indicaciones para el talento (expresiones, movimientos, voz)
5. Especifica elementos visuales (colores, props, fondo, gr√°ficos)
6. Define la m√∫sica y efectos de sonido para cada escena
7. Incluye transiciones suaves entre escenas
8. Optimiza para engagement en ${platform}

FORMATO DE SALIDA:
Devuelve un objeto JSON con:
{
  "title": "T√≠tulo del video",
  "platform": "plataforma del storytelling",
  "format":"formato del storytelling", 
  "hook": "Hook inicial de 3 segundos",
  "style":"Style del storytelling",
  "scenes": [
    {
      "scene": 1,
      "duration": "segundos",
      "description": "Descripci√≥n visual detallada",
      "camera": "Tipo de toma y movimiento",
      "lighting": "Configuraci√≥n de iluminaci√≥n",
      "talent": "Instrucciones para el talento",
      "props": "Elementos necesarios",
      "audio": "M√∫sica/efectos de sonido",
      "text": "Texto en pantalla si aplica"
  parseDurationToSeconds(length) {
    switch (length) {
      case 'short': return 15;
      case 'medium': return 30;
      case 'long': return 60;
      default: return parseInt(length) || 15;
    },
   
  ],
  "duration":"duracion del video del storytelling",
  "recomendaciones";"recomendaciones para tener exito con tu video"   
  "cta": "Call to action final",
  "tags":"tags storytelling",
  "hashtags": ["#hashtag1", "#hashtag2"]
}`;

}

/** Construye el prompt de usuario */
function buildUserPrompt({ topic }) {
  return `Genera el storytelling para el tema: "${topic}".`;
}


/** Funci√≥n principal expuesta */
async function generateContent(props) {
  logger.info('üöÄ OpenAIProvider.generating:', {
    topic: props.topic,
    platform: props.platform,
    duration: props.duration
  });

  const systemPrompt = buildSystemPrompt(props);
  const userPrompt   = buildUserPrompt(props);

  try {
    const res = await client.chat.completions.create({
      model: MODEL,
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user',   content: userPrompt }
      ],
      temperature: DEFAULT_TEMPERATURE,
      max_tokens:  DEFAULT_MAX_TOKENS
    });

     const raw = res.choices[0].message; // este es un objeto
     const jsonString = raw.content;     // esto es un string JSON dentro del campo `content`
       const parsed = JSON.parse(jsonString); 
            
      if (!parsed) {
      throw new Error('OpenAI devolvi√≥ contenido vac√≠o');
    }

    logger.debug('üì• Respuesta cruda OpenAI:', parsed);
    
    // Parsear el JSON de la respuesta
    try {
      
      return parsed;
    } catch (parseError) {
      logger.error('Error parseando JSON de OpenAI:', parseError);
      throw new Error(`OpenAI devolvi√≥ contenido no v√°lido: ${parseError.message}`);
    }

  } catch (err) {
    logger.error('‚ùå Error en OpenAIProvider:', err);
    // Podr√≠as implementar un fallback similar al de Gemini si quisieras
    throw new Error(`OpenAIProvider error: ${err.message}`);
  }
}

module.exports = {
  generateContent
};
