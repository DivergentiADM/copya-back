// providers/geminiProvider.js
require('dotenv').config();
const { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } = require('@google/generative-ai');
const logger = require('../../utils/logger');

// ANOTACI√ìN: Es buena pr√°ctica inicializar el cliente de la API una sola vez.
const genAI = new GoogleGenerativeAI(process.env.SYSTEM_GEMINI_API_KEY);
if (!process.env.SYSTEM_GEMINI_API_KEY) {
  throw new Error('API key is required for gemini provider');
}

const providerName = 'gemini';

/**
 * Construye el prompt de sistema con todo el contexto disponible.
 */
function buildSystemPrompt(agent, topic, platform, format, duration, lighting, style, targetAudience, businessContext) {
  // ANOTACI√ìN: Se corrigi√≥ el JSON de ejemplo en el prompt.
  // El bloque de la funci√≥n `parseDurationToSeconds` era inv√°lido y confundir√≠a al modelo.
  return `Eres ${agent.personality}, un director de contenido viral.
  
üéØ PERSONALIDAD Y ESTILO:
${agent.communicationStyle?.narrativeStructure || 'gancho-desarrollo-cl√≠max-resoluci√≥n'}
Tono: ${agent.communicationStyle?.tone || 'energ√©tico y aut√©ntico'}
Vocabulario: ${agent.communicationStyle?.vocabulary || 'accesible pero profesional'}

üì∫ DETALLES DEL PROYECTO:
- Tema central: "${topic}"
- Plataforma: ${platform} (${format})
- Duraci√≥n: ${duration} segundos
- Estilo visual: ${style}
- Iluminaci√≥n: ${lighting}
- Audiencia objetivo: ${targetAudience}
${Object.keys(businessContext || {}).length ? `\nüè¢ CONTEXTO DE NEGOCIO:\n${JSON.stringify(businessContext, null, 2)}` : ''}

INSTRUCCIONES PARA EL STORYTELLING:
1. Crea una narrativa visual atractiva que se adapte perfectamente al formato ${format} de ${platform}.
2. Divide el video en escenas espec√≠ficas con duraci√≥n exacta para cada una.
3. Describe cada toma con detalles t√©cnicos (c√°mara, iluminaci√≥n, composici√≥n).
4. Incluye indicaciones para el talento (expresiones, movimientos, voz).
5. Especifica elementos visuales (colores, props, fondo, gr√°ficos).
6. Define la m√∫sica y efectos de sonido para cada escena.
7. Incluye transiciones suaves entre escenas.
8. Optimiza para engagement en ${platform}.

FORMATO DE SALIDA ESTRICTO:
Responde √∫nicamente con un objeto JSON v√°lido que siga esta estructura. No incluyas texto antes o despu√©s del JSON.
{
  "title": "T√≠tulo del video",
  "platform": "plataforma del storytelling",
  "format": "formato del storytelling",
  "hook": "Hook inicial de 3 segundos",
  "style": "Style del storytelling",
  "scenes": [
    {
      "scene": 1,
      "duration": "10 segundos",
      "description": "Descripci√≥n visual detallada",
      "camera": "Tipo de toma y movimiento",
      "lighting": "Configuraci√≥n de iluminaci√≥n",
      "talent": "Instrucciones para el talento",
      "props": "Elementos necesarios",
      "audio": "M√∫sica/efectos de sonido",
      "text": "Texto en pantalla si aplica"
    }
  ],
  "duration": "duracion total del video en segundos",
  "recommendations": "recomendaciones para tener exito con tu video",
  "cta": "Call to action final",
  "tags": "tags para el storytelling",
  "hashtags": ["#hashtag1", "#hashtag2"]
}
`;
}

/**
 * Construye el prompt de usuario. Permite un prompt personalizado para mayor flexibilidad.
 */
function buildUserPrompt({ topic, customPrompt }) {
  // ANOTACI√ìN: Ahora puedes pasar instrucciones adicionales del usuario si es necesario.
  if (customPrompt) {
    return customPrompt;
  }
  return `Crea el contenido para el tema: "${topic}". Sigue estrictamente las instrucciones del sistema y responde solo con el objeto JSON requerido.`;
}

/**
 * Genera un storytelling para un video utilizando Gemini.
 * @param {object} props - Propiedades para la generaci√≥n del contenido.
 * @returns {object} - El objeto JSON con el storytelling.
 */
async function generateStory(props) {
  logger.info('üöÄ GeminiProvider.generating:', {
    topic: props.topic,
    platform: props.platform,
    duration: props.duration
  });

  try {
    // ANOTACI√ìN: La forma correcta de usar el SDK es obtener el modelo primero.
    const model = genAI.getGenerativeModel({
      model: "gemini-2.5-flash", // Se recomienda usar 1.5 Pro por su capacidad de seguir instrucciones complejas.
      systemInstruction: buildSystemPrompt(props),
    });

    const userPrompt = buildUserPrompt(props);
    
    // ANOTACI√ìN: Se define la configuraci√≥n de generaci√≥n y seguridad.
    const generationConfig = {
      temperature: 0.7,
      maxOutputTokens: 4096, // Aumentado para respuestas complejas
      responseMimeType: "application/json", // ¬°Clave! Le pedimos a la API que la salida sea JSON directamente.
    };
    
    // ANOTACI√ìN: Se simplific√≥ la llamada a la API. `async/await` directo es m√°s limpio.
    const result = await model.generateContent(userPrompt, generationConfig);
    const response = result.response;
    const rawText = response.text();
    logger.info(`<<<<< RAW AI RESPONSE (${providerName}) >>>>>: ${rawText}`);

    // ANOTACI√ìN: El SDK parsea el JSON autom√°ticamente si usas responseMimeType: "application/json".
    // El texto de la respuesta ya es el objeto que necesitas.
    const story = response.text();
    const match = rawText.match(/\{[\s\S]*\}/);

    if (!match) {
      throw new Error("No valid JSON object found in the AI response.");
    }
    
    const jsonString = match[0];
    let parsedStory = JSON.parse(jsonString); // Parseamos el string limpio

    logger.info('‚úÖ GeminiProvider.parsed successfully');

    logger.info(`<<<<< PARSEDSTORY AI RESPONSE (${providerName}) >>>>>: ${parsedStory}`); 
   
    logger.info('‚úÖ GeminiProvider.finished:', { title: parsedStory.title });
    return parsedStory;

  } catch (error) {
    // ANOTACI√ìN: Un manejo de errores robusto es crucial.
    logger.error('‚ùå Error in GeminiProvider.generateStory:', {
      message: error.message,
      stack: error.stack,
      details: error.response?.candidates || 'No additional details'
    });
    // Relanzar el error o devolver un objeto de error estandarizado
    throw new Error(`Failed to generate story from Gemini: ${error.message}`);
  }
}

module.exports = {
  generateStory
};